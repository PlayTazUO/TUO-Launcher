name: Launcher-Deploy

on:
  push:
    branches: "main"
    paths-ignore:
      - "*.yml"
      - "*.md"
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch to run the workflow on"
        required: true
        default: "main"

concurrency:
  group: maindeploy
  cancel-in-progress: true

env:
  OUTPUT_PATH: "../../bin/dist"
  PROJ: "TazUOLauncher/TazUOLauncher.csproj"
  ZIP_NAME: "TazUO-Launcher"
  TAG_NAME: "TazUO-Launcher"

  DOTNET_NOLOGO: false
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip

jobs:
  build:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    outputs:
      release_notes: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
    strategy:
      max-parallel: 1
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest, macos-13]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref_name }}

      - name: Extract Version
        shell: bash
        run: |
          export LC_ALL=C.UTF-8
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            VERSION=$(grep -oP '<AssemblyVersion>\K\d+\.\d+\.\d+' "${{ env.PROJ }}")
          else
            VERSION=$(sed -nE 's/.*<AssemblyVersion>([0-9]+\.[0-9]+\.[0-9]+).*/\1/p' "${{ env.PROJ }}")
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create tag
        continue-on-error: true
        if: ${{ strategy.job-index == 0 }}
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Set Runtime Identifier
        id: rid
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            OS="win"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            OS="osx"
          else
            OS="linux"
          fi

          if [[ "$RUNNER_ARCH" == "X64" ]]; then
            ARCH="x64"
          elif [[ "$RUNNER_ARCH" == "ARM64" ]]; then
            ARCH="arm64"
          else
            echo "Unsupported architecture: $RUNNER_ARCH" >&2
            exit 1
          fi

          echo "RID=${OS}-${ARCH}" >> $GITHUB_ENV
        shell: bash

      - name: Build
        run: "dotnet publish '${{ env.PROJ }}' -c Release -o ${{ env.OUTPUT_PATH }}/${{ env.RID }}"

      - name: Set executable permission (Linux/macOS)
        if: runner.os != 'Windows'
        run: chmod +x ${{ env.OUTPUT_PATH }}/${{ env.RID }}/*

      - name: Prepare DMG contents (macOS only)
        if: runner.os == 'macOS'
        run: |
          mkdir -p "${{ env.OUTPUT_PATH }}/dmg/TazUOLauncher"
          cp -R "${{ env.OUTPUT_PATH }}/${{ env.RID }}/"* "${{ env.OUTPUT_PATH }}/dmg/TazUOLauncher/"

      - name: Create DMG (macOS only)
        continue-on-error: true
        if: runner.os == 'macOS'
        uses: bittiez/create-dmg-action@v1.0.1
        with:
          srcdir: "${{ env.OUTPUT_PATH }}/dmg"
          name: "${{ env.ZIP_NAME }}.${{ env.RID }}"

      - name: Create package
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          directory: "${{ env.OUTPUT_PATH }}/${{ env.RID }}"
          filename: "${{ env.ZIP_NAME }}.${{ env.RID }}.zip"
          exclusions: "*.zip"

      - name: Get last release commit
        shell: bash
        id: last_release
        run: |
          if git rev-parse --verify "${{ env.TAG_NAME }}" >/dev/null 2>&1; then
            LAST_COMMIT=$(git rev-parse "${{ env.TAG_NAME }}")
            echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV
            echo "Last release commit: $LAST_COMMIT"
          else
            echo "No previous release found."
            echo "LAST_COMMIT=" >> $GITHUB_ENV
          fi

      - name: Generate release notes
        shell: bash
        id: release_notes
        run: |
          if [ -z "$LAST_COMMIT" ]; then
            echo "No previous release found. Listing 10 latest commits."
            RELEASE_NOTES=$(git log -10 --pretty=format:"- %s")
          else
            echo "Generating release notes from commit $LAST_COMMIT to HEAD."
            RELEASE_NOTES=$(git log ${LAST_COMMIT}..HEAD --pretty=format:"- %s")
          fi

          printf "RELEASE_NOTES<<EOF\n%s\nEOF\n" "$RELEASE_NOTES" >> $GITHUB_OUTPUT

      - name: Echo release notes
        shell: bash
        run: echo "${{ steps.release_notes.outputs.RELEASE_NOTES }}"

      - name: Remove old Release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        if: ${{ strategy.job-index == 0 }}
        with:
          delete_release: true
          tag_name: ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release
        if: ${{ strategy.job-index == 0 }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.OUTPUT_PATH }}/${{ env.RID }}/${{ env.ZIP_NAME }}.${{ env.RID }}.zip,${{ env.ZIP_NAME }}.${{ env.RID }}.dmg"
          name: "v${{ env.VERSION }}"
          body: |
            These are built automatically on the main branch. 
            This is version v${{ env.VERSION }} 

            # Release notes
            ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          makeLatest: true
          allowUpdates: true
          prerelease: false
          tag: ${{ env.TAG_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Release
        if: ${{ strategy.job-index > 0 }}
        uses: ncipollo/release-action@v1
        with:
          name: "v${{ env.VERSION }}"
          body: |
            These are built automatically on the main branch. 
            This is version v${{ env.VERSION }} 

            # Release notes
            ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          artifacts: "${{ env.OUTPUT_PATH }}/${{ env.RID }}/${{ env.ZIP_NAME }}.${{ env.RID }}.zip,${{ env.ZIP_NAME }}.${{ env.RID }}.dmg"
          allowUpdates: true
          prerelease: false
          replacesArtifacts: false
          tag: ${{ env.TAG_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
